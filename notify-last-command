#!/bin/bash

# Minimal duration of last commands to notify it.
export NOTIFY_MIN_SECONDS=${NOTIFY_MIN_SECONDS-10}


function _reset_title() {
    echo -ne "\033]0;/bin/bash ($$)\007"
}

function _notify_last_command() {
    last_entry=($@)

    # If not desktop, use client.
    if [ -z "${DESKTOP_SESSION-}" ] ; then
        notify=notify-client
    elif notify-is-focused; then
        # bash is focused. skip.
        return
    else
        notify=notify-send
    fi

    last_start=${last_entry[2]}
    if [ $last_start -le ${_NOTIFY_LAST_TIME-0} ] ; then
        return
    fi

    now=$(date +%s)
    elapsed_seconds=$((now - last_start))

    if [ $elapsed_seconds -lt ${NOTIFY_MIN_SECONDS} ] ; then
        return
    fi

    last_exit_code=${last_entry[0]}
    last_command=${last_entry[@]:3}

    if [ ${last_exit_code} -eq 0 ] ; then
        $notify --icon utilites-terminal \
                "Command exited on $(hostname --fqdn)" "$last_command"
    else
        $notify --icon gtk-dialog-error --urgency=critical \
                "Command failed on $(hostname --fqdn)" "$last_command"
    fi
}

function notify_last_command() {
    last_exit_status=$1
    last_entry="$(HISTTIMEFORMAT="%s " history 1)"

    export _NOTIFY_LAST_TIME=$(date +%s)
    if expr match "$last_entry" ".*\(byobu\|tmux\|screen\|ssh\).*" &>/dev/null ; then
        _reset_title
    fi

    # Run in background
    (_notify_last_command $last_exit_status ${last_entry} &)
}

# Ignore previous history.
export _NOTIFY_LAST_TIME=$(date +%s)
_reset_title

if [[ ${BASH_SOURCE[0]} = $0 ]]; then
    set -eu
    notify_last_command $1
fi
