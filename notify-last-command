#!/bin/bash

# Minimal duration of last commands to notify it.
export NOTIFY_MIN_SECONDS=${NOTIFY_MIN_SECONDS-10}


function _guess_window_title() {
    # If not on TMUX and we have an inherited title, use it. Because we don't control the terminal title.
    if [ -z "${TMUX-}" -a -n "${NOTIFY_INHERIT_TITLE}" ] ; then
        echo ${NOTIFY_INHERIT_TITLE}
        return
    fi

    fqdn=$(hostname --fqdn)
    if [ -n "${TMUX-}" ] ; then
        # Hack to manage old debian version. Can't tell which of byobu or tmux or else needs to be checked.
        if (echo -e '8.0 NEWER'; cat /etc/debian_version 2>/dev/null) | sort -V | head -1 | grep -q NEWER ; then
            # Let byobu update pane title
            echo "$fqdn ($$)";
        else
            # This is the default byobu title, recomputed
            ips=($(hostname --all-ip-addresses))
            echo "${LOGNAME}@$fqdn (${ip[0]}) - byobu"
        fi
    else
        # Put this in ~/.config/byobu/.tmux.conf:
        #
        #     set -g set-titles on
        #     set -g set-titles-string '#(hostname --fqdn) (#{pane_pid})'
        echo "${PANE_TITLE-bash} $fqdn ($$)"
    fi
}

function _reset_title() {
    echo -ne "\033]2;${NOTIFY_TITLE}\007"
}

function _notify_last_command() {
    last_entry=($@)

    # Wait this seconds so that Window manager can update the title. This way,
    # we avoid to consider current window as unfocused.
    sleep ${WAIT_TITLE-0}

    # If not desktop, use client.
    if [ -z "${DESKTOP_SESSION-}" ] ; then
        notify=notify-client
    elif notify-is-focused; then
        # bash is focused. skip.
        return
    else
        notify=notify-send
    fi

    last_start=${last_entry[2]}
    if [ $last_start -le ${_NOTIFY_LAST_TIME-0} ] ; then
        return
    fi

    now=$(date +%s)
    elapsed_seconds=$((now - last_start))

    if [ $elapsed_seconds -lt ${NOTIFY_MIN_SECONDS} ] ; then
        return
    fi

    last_exit_code=${last_entry[0]}
    last_command=${last_entry[@]:3}

    args="--app-name $(basename $SHELL)"
    if [ ${last_exit_code} -eq 0 ] ; then
        $notify $args --icon utilites-terminal --hint int:transient:1 \
                "Command exited on ${NOTIFY_TITLE}" "$last_command" &>/dev/null
    else
        $notify $args --icon gtk-dialog-error --urgency=critical \
                "Command failed on ${NOTIFY_TITLE}" "$last_command" &>/dev/null
    fi
}

function _export_title() {
    title="$*"
    export NOTIFY_TITLE="$title"
    # Pass NOTIFY_TITLE to ssh connections through LC_* hack.
    export LC_TELEPHONE="notify_title:$title"
}

function notify_last_command() {
    last_exit_status=$1
    last_entry=($(HISTTIMEFORMAT="%s " history 1))

    # Skip if history is empty
    if [ "${#last_entry[@]}" -eq 0 ] ; then
        return
    fi

    _export_title $(_guess_window_title)
    _reset_title

    # Run in background
    (WAIT_TITLE=1 _notify_last_command $last_exit_status ${last_entry[*]} &)

    export _NOTIFY_LAST_TIME=$(date +%s)
}

if [[ ${BASH_SOURCE[0]} = $0 ]]; then
    set -eux
    _notify_last_command $@
else
    # sourced in .bashrc, bootstrap.
    # Ignore previous history.
    export _NOTIFY_LAST_TIME=$(date +%s)

    # On shell init, if on SSH connections, not within tmux, LC_TELEPHONE contains passthrough hackâ€¦
    if [[ -n "${SSH_CONNECTION-}" && -z "${NOTIFY_TITLE-}" && "${LC_TELEPHONE-}" =~ ^notify_title:* ]] ;
    then
        # Save the inherited title
        export NOTIFY_INHERIT_TITLE="${LC_TELEPHONE##notify_title:}"
    fi

    _export_title $(_guess_window_title)
    _reset_title
fi
