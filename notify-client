#!/usr/bin/env python3

import argparse
import json
import logging
import os
import re
import socket
import sys


try:
    ConnectionRefusedError
except NameError:
    ConnectionRefusedError = socket.error


logger = logging.getLogger('notify-client')


logging.basicConfig(
    level=logging.DEBUG if os.environ.get('DEBUG') else logging.WARNING,
    format='%(message)s',
)

parser = argparse.ArgumentParser()
parser.add_argument(
    'summary', metavar='SUMMARY',
    help="Titleline of the notification.",
)
parser.add_argument(
    'body', metavar='BODY', nargs='?',
    default="From " + socket.getfqdn(),
    help="Extendend information in the notification.",
)

parser.add_argument(
    '-a', '--app-name', metavar='APP_NAME',
    help="Specifies the app name for the icon",
)
parser.add_argument(
    '-c', '--category', metavar='TYPE[,TYPE...]',
    help="Specifies the notification category.",
)
AUTO_CONTEXT = object()
parser.add_argument(
    '-f', '--focus-context', metavar='{VAR:...[,VAR:...]}',
    help="Specifies focus context.",
    default=AUTO_CONTEXT,
)
parser.add_argument(
    '-i', '--icon', metavar='ICON[,ICON...]',
    help="Specifies an icon filename or stock icon to display.",
)
parser.add_argument(
    '--hint', metavar='TYPE:NAME:VALUE',
    help=(
        "Specifies basic extra data to pass. Valid types are int, double, "
        "string and byte."
    ),
)
parser.add_argument(
    '-s', '--server', metavar='ADDR:PORT', default='127.0.0.1:1216',
    help="Host to send notification to.",
)
parser.add_argument(
    '-t', '--expire-time', metavar='TIME',
    help="Specifies the timeout in milliseconds at which to expire.",
)
parser.add_argument(
    '-u', '--urgency', metavar='LEVEL',
    choices=['low', 'normal', 'critical'],
    help="Specifies the urgency level.",
)

args = parser.parse_args()

socket.setdefaulttimeout(30)
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
addr, port = args.server.split(':')
logger.info("Sending to %s:%s.", addr, port)

try:
    client.connect((addr, int(port)))
except ConnectionRefusedError:
    logger.warn('Failed to notify %r. Connection refused.', args.summary)
    sys.exit(1)

data = dict(args.__dict__)
data.pop('server')

focus_context = {}
if data['focus_context'] == AUTO_CONTEXT:
    focus_context['HOSTNAME'] = socket.getfqdn()
    focus_context['TMUX'] = os.environ.get('TMUX')

    window_id = ''
    try:
        with open(os.path.expanduser('~/.cache/windowids')) as fo:
            window_id = ','.join(fo.read().splitlines())
            logger.debug("Read WINDOWID %r from %s", window_id, fo.name)
    except (TypeError, IOError):
        window_id = os.environ.get('WINDOWID')

    focus_context['WINDOWID'] = window_id

    uuid = ''
    try:
        with open(os.path.expanduser('~/.cache/terminator_uuids')) as fo:
            uuid = ','.join(fo.read().splitlines())
            logger.debug("Read TERMINATOR_UUID %r from %s", uuid, fo.name)
    except (TypeError, IOError):
        uuid = os.environ.get('TERMINATOR_UUID')

    focus_context['TERMINATOR_UUID'] = uuid

    focus_context['TMUX_PANE'] = os.environ.get('TMUX_PANE')

    data['focus_context'] = json.dumps(focus_context)
    logger.debug("Automatic focus_context is %r", data['focus_context'])

payload = json.dumps(data).encode('utf-8')

logger.debug(">>> %r", payload)
client.send(payload)

client.close()
