#!/usr/bin/env python3

import argparse
import json
import logging
import os
import socket
import sys
from textwrap import dedent


try:
    ConnectionRefusedError
except NameError:
    ConnectionRefusedError = socket.error


logger = logging.getLogger('notify-client')
current_title = os.environ.get('NOTIFY_TITLE')


logging.basicConfig(
    level=logging.DEBUG if os.environ.get('DEBUG') else logging.WARNING,
    format='%(message)s',
)

parser = argparse.ArgumentParser(epilog=dedent("""\
If NOTIFY_TITLE env var is set, its value is sent to notify-proxy. notify-proxy
inhibit notification if focused window title ends with NOTIFY_TITLE value. """))
parser.add_argument(
    'summary', metavar='SUMMARY',
    help="Titleline of the notification.",
)
parser.add_argument(
    'body', metavar='BODY', nargs='?',
    default="From %s" % current_title if current_title else None,
    help="Extendend information in the notification.",
)

parser.add_argument(
    '-a', '--app-name', metavar='APP_NAME',
    help="Specifies the app name for the icon",
)
parser.add_argument(
    '-c', '--category', metavar='TYPE[,TYPE...]',
    help="Specifies the notification category.",
)
parser.add_argument(
    '-i', '--icon', metavar='ICON[,ICON...]',
    help="Specifies an icon filename or stock icon to display.",
)
parser.add_argument(
    '--hint', metavar='TYPE:NAME:VALUE', action='append',
    help=(
        "Specifies basic extra data to pass. Valid types are int, double, "
        "string and byte."
    ),
)
parser.add_argument(
    '-s', '--server', metavar='ADDR:PORT', default='127.0.0.1:1216',
    help="Host to send notification to.",
)
parser.add_argument(
    '-t', '--expire-time', metavar='TIME', default=500,
    help="Specifies the timeout in milliseconds at which to expire.",
)
parser.add_argument(
    '-u', '--urgency', metavar='LEVEL',
    choices=['low', 'normal', 'critical'],
    help="Specifies the urgency level.",
)

args = parser.parse_args()

socket.setdefaulttimeout(30)
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
addr, port = args.server.split(':')
logger.info("Sending to %s:%s.", addr, port)

try:
    client.connect((addr, int(port)))
except ConnectionRefusedError:
    logger.warning('Failed to notify %r. Connection refused.', args.summary)
    sys.exit(1)

data = dict(args.__dict__)
data.pop('server')
data['window_title'] = current_title

payload = json.dumps(data).encode('utf-8')

logger.debug(">>> %r", payload)
client.send(payload)

client.close()
